using AgatePris.Intar.Integer;
using NUnit.Framework;
using static NUnit.Framework.Assert;
using i08 = System.SByte;
using i16 = System.Int16;
using i32 = System.Int32;
using i64 = System.Int64;
using u08 = System.Byte;
using u16 = System.UInt16;
using u32 = System.UInt32;
using u64 = System.UInt64;

namespace AgatePris.Intar.Tests.Integer {
    public class OverflowingTest {
        [Test]
        public void Test() {
            const i08 i08_0 = 0;
            const i16 i16_0 = 0;
            const i32 i32_0 = 0;
            const i64 i64_0 = 0;
            const u08 u08_0 = 0;
            const u16 u16_0 = 0;
            const u32 u32_0 = 0;
            const u64 u64_0 = 0;
            const i08 i08_2 = 2;
            const i16 i16_2 = 2;
            const i32 i32_2 = 2;
            const i64 i64_2 = 2;
            const u08 u08_2 = 2;
            const u16 u16_2 = 2;
            const u32 u32_2 = 2;
            const u64 u64_2 = 2;
            const i08 i08_10 = 10;
            const i16 i16_10 = 10;
            const i32 i32_10 = 10;
            const i64 i64_10 = 10;
            const i08 i08Neg2 = -2;
            const i16 i16Neg2 = -2;
            const i32 i32Neg2 = -2;
            const i64 i64Neg2 = -2;
            const i08 i08Neg100 = -100;
            const i16 i16Neg100 = -100;
            const i32 i32Neg100 = -100;
            const i64 i64Neg100 = -100;
            const i08 i08_100 = 100;
            const i16 i16_100 = 100;
            const i32 i32_100 = 100;
            const i64 i64_100 = 100;
            const u08 u08_1 = 1;
            const u16 u16_1 = 1;
            const u32 u32_1 = 1;
            const u64 u64_1 = 1;
            const u08 u08_100 = 100;
            const u16 u16_100 = 100;
            const u32 u32_100 = 100;
            const u64 u64_100 = 100;
            const u08 u08_200 = 200;
            const u16 u16_200 = 200;
            const u32 u32_200 = 200;
            const u64 u64_200 = 200;
            AreEqual(i08_100.WrappingAdd(27), 127);
            AreEqual(i16_100.WrappingAdd(27), 127);
            AreEqual(i32_100.WrappingAdd(27), 127);
            AreEqual(i64_100.WrappingAdd(27), 127);
            AreEqual(u08_200.WrappingAdd(55), 255);
            AreEqual(u16_200.WrappingAdd(55), 255);
            AreEqual(u32_200.WrappingAdd(55), 255);
            AreEqual(u64_200.WrappingAdd(55), 255);
            AreEqual(i08.MaxValue.WrappingAdd(2), i08.MinValue + 1);
            AreEqual(i16.MaxValue.WrappingAdd(2), i16.MinValue + 1);
            AreEqual(i32.MaxValue.WrappingAdd(2), i32.MinValue + 1);
            AreEqual(i64.MaxValue.WrappingAdd(2), i64.MinValue + 1);
            AreEqual(u08_200.WrappingAdd(u08.MaxValue), 199);
            AreEqual(u16_200.WrappingAdd(u16.MaxValue), 199);
            AreEqual(u32_200.WrappingAdd(u32.MaxValue), 199);
            AreEqual(u64_200.WrappingAdd(u64.MaxValue), 199);
            AreEqual(i08_0.WrappingSub(127), -127);
            AreEqual(i16_0.WrappingSub(127), -127);
            AreEqual(i32_0.WrappingSub(127), -127);
            AreEqual(i64_0.WrappingSub(127), -127);
            AreEqual(u08_100.WrappingSub(100), 0);
            AreEqual(u16_100.WrappingSub(100), 0);
            AreEqual(u32_100.WrappingSub(100), 0);
            AreEqual(u64_100.WrappingSub(100), 0);
            AreEqual(i08Neg2.WrappingSub(i08.MaxValue), i08.MaxValue);
            AreEqual(i16Neg2.WrappingSub(i16.MaxValue), i16.MaxValue);
            AreEqual(i32Neg2.WrappingSub(i32.MaxValue), i32.MaxValue);
            AreEqual(i64Neg2.WrappingSub(i64.MaxValue), i64.MaxValue);
            AreEqual(u08_100.WrappingSub(u08.MaxValue), 101);
            AreEqual(u16_100.WrappingSub(u16.MaxValue), 101);
            AreEqual(u32_100.WrappingSub(u32.MaxValue), 101);
            AreEqual(u64_100.WrappingSub(u64.MaxValue), 101);
            AreEqual(i08_10.WrappingMul(12), 120);
            AreEqual(i16_10.WrappingMul(12), 120);
            AreEqual(i32_10.WrappingMul(12), 120);
            AreEqual(i64_10.WrappingMul(12), 120);
            AreEqual(((i08)11).WrappingMul(12), -124);
            AreEqual(((u08)10).WrappingMul(12), 120);
            AreEqual(((u08)25).WrappingMul(12), 44);
            AreEqual(i08_100.WrappingAddUnsigned(27), 127);
            AreEqual(i16_100.WrappingAddUnsigned(27), 127);
            AreEqual(i32_100.WrappingAddUnsigned(27), 127);
            AreEqual(i64_100.WrappingAddUnsigned(27), 127);
            AreEqual(i08_2.WrappingAddUnsigned(u08.MaxValue), 1);
            AreEqual(i16_2.WrappingAddUnsigned(u16.MaxValue), 1);
            AreEqual(i32_2.WrappingAddUnsigned(u32.MaxValue), 1);
            AreEqual(i64_2.WrappingAddUnsigned(u64.MaxValue), 1);
            AreEqual(i08_0.WrappingSubUnsigned(127), -127);
            AreEqual(i16_0.WrappingSubUnsigned(127), -127);
            AreEqual(i32_0.WrappingSubUnsigned(127), -127);
            AreEqual(i64_0.WrappingSubUnsigned(127), -127);
            AreEqual(i08Neg2.WrappingSubUnsigned(u08.MaxValue), -1);
            AreEqual(i16Neg2.WrappingSubUnsigned(u16.MaxValue), -1);
            AreEqual(i32Neg2.WrappingSubUnsigned(u32.MaxValue), -1);
            AreEqual(i64Neg2.WrappingSubUnsigned(u64.MaxValue), -1);
            AreEqual(u08_1.WrappingAddSigned(2), 3);
            AreEqual(u16_1.WrappingAddSigned(2), 3);
            AreEqual(u32_1.WrappingAddSigned(2), 3);
            AreEqual(u64_1.WrappingAddSigned(2), 3);
            AreEqual(u08_1.WrappingAddSigned(-2), u08.MaxValue);
            AreEqual(u16_1.WrappingAddSigned(-2), u16.MaxValue);
            AreEqual(u32_1.WrappingAddSigned(-2), u32.MaxValue);
            AreEqual(u64_1.WrappingAddSigned(-2), u64.MaxValue);
            AreEqual(u08.MaxValue.WrappingAddSigned(2), 1);
            AreEqual(u16.MaxValue.WrappingAddSigned(2), 1);
            AreEqual(u32.MaxValue.WrappingAddSigned(2), 1);
            AreEqual(u64.MaxValue.WrappingAddSigned(2), 1);
            AreEqual(i08_100.WrappingNeg(), -100);
            AreEqual(i16_100.WrappingNeg(), -100);
            AreEqual(i32_100.WrappingNeg(), -100);
            AreEqual(i64_100.WrappingNeg(), -100);
            AreEqual(i08.MinValue.WrappingNeg(), i08.MinValue);
            AreEqual(i16.MinValue.WrappingNeg(), i16.MinValue);
            AreEqual(i32.MinValue.WrappingNeg(), i32.MinValue);
            AreEqual(i64.MinValue.WrappingNeg(), i64.MinValue);
            AreEqual(u08_0.WrappingNeg(), 0);
            AreEqual(u16_0.WrappingNeg(), 0);
            AreEqual(u32_0.WrappingNeg(), 0);
            AreEqual(u64_0.WrappingNeg(), 0);
            AreEqual(u08.MaxValue.WrappingNeg(), 1);
            AreEqual(u16.MaxValue.WrappingNeg(), 1);
            AreEqual(u32.MaxValue.WrappingNeg(), 1);
            AreEqual(u64.MaxValue.WrappingNeg(), 1);
            AreEqual(u08_2.WrappingNeg(), unchecked((u08)((~2) + 1)));
            AreEqual(u16_2.WrappingNeg(), unchecked((u16)((~2) + 1)));
            AreEqual(u32_2.WrappingNeg(), unchecked((u32)((~2) + 1)));
            AreEqual(u64_2.WrappingNeg(), unchecked((u64)((~2) + 1)));
            AreEqual(u08_2.WrappingNeg(), unchecked((u08)~1));
            AreEqual(u16_2.WrappingNeg(), unchecked((u16)~1));
            AreEqual(u32_2.WrappingNeg(), unchecked((u32)~1));
            AreEqual(u64_2.WrappingNeg(), unchecked((u64)~1));
            AreEqual(i08_100.WrappingAbs(), 100);
            AreEqual(i16_100.WrappingAbs(), 100);
            AreEqual(i32_100.WrappingAbs(), 100);
            AreEqual(i64_100.WrappingAbs(), 100);
            AreEqual(i08Neg2.WrappingAbs(), 2);
            AreEqual(i16Neg2.WrappingAbs(), 2);
            AreEqual(i32Neg2.WrappingAbs(), 2);
            AreEqual(i64Neg2.WrappingAbs(), 2);
            AreEqual(i08.MinValue.WrappingAbs(), i08.MinValue);
            AreEqual(i16.MinValue.WrappingAbs(), i16.MinValue);
            AreEqual(i32.MinValue.WrappingAbs(), i32.MinValue);
            AreEqual(i64.MinValue.WrappingAbs(), i64.MinValue);
            AreEqual(unchecked((u08)i08.MinValue.WrappingAbs()), (u08)i08.MaxValue + 1);
            AreEqual(unchecked((u16)i16.MinValue.WrappingAbs()), (u16)i16.MaxValue + 1);
            AreEqual(unchecked((u32)i32.MinValue.WrappingAbs()), (u32)i32.MaxValue + 1);
            AreEqual(unchecked((u64)i64.MinValue.WrappingAbs()), (u64)i64.MaxValue + 1);
            AreEqual(i08_100.UnsignedAbs(), 100);
            AreEqual(i16_100.UnsignedAbs(), 100);
            AreEqual(i32_100.UnsignedAbs(), 100);
            AreEqual(i64_100.UnsignedAbs(), 100);
            AreEqual(i08Neg2.UnsignedAbs(), 2);
            AreEqual(i16Neg2.UnsignedAbs(), 2);
            AreEqual(i32Neg2.UnsignedAbs(), 2);
            AreEqual(i64Neg2.UnsignedAbs(), 2);
            AreEqual(i08.MinValue.UnsignedAbs(), (u08)i08.MaxValue + 1);
            AreEqual(i16.MinValue.UnsignedAbs(), (u16)i16.MaxValue + 1);
            AreEqual(i32.MinValue.UnsignedAbs(), (u32)i32.MaxValue + 1);
            AreEqual(i64.MinValue.UnsignedAbs(), (u64)i64.MaxValue + 1);
            AreEqual(i08_100.AbsDiff(i08_2), 98);
            AreEqual(i16_100.AbsDiff(i16_2), 98);
            AreEqual(i32_100.AbsDiff(i32_2), 98);
            AreEqual(i64_100.AbsDiff(i64_2), 98);
            AreEqual(i08_2.AbsDiff(i08_100), 98);
            AreEqual(i16_2.AbsDiff(i16_100), 98);
            AreEqual(i32_2.AbsDiff(i32_100), 98);
            AreEqual(i64_2.AbsDiff(i64_100), 98);
            AreEqual(i08Neg2.AbsDiff(i08_100), 102);
            AreEqual(i16Neg2.AbsDiff(i16_100), 102);
            AreEqual(i32Neg2.AbsDiff(i32_100), 102);
            AreEqual(i64Neg2.AbsDiff(i64_100), 102);
            AreEqual(i08Neg2.AbsDiff(i08Neg100), 98);
            AreEqual(i16Neg2.AbsDiff(i16Neg100), 98);
            AreEqual(i32Neg2.AbsDiff(i32Neg100), 98);
            AreEqual(i64Neg2.AbsDiff(i64Neg100), 98);
            AreEqual(i08.MinValue.AbsDiff(i08.MaxValue), u08.MaxValue);
            AreEqual(i16.MinValue.AbsDiff(i16.MaxValue), u16.MaxValue);
            AreEqual(i32.MinValue.AbsDiff(i32.MaxValue), u32.MaxValue);
            AreEqual(i64.MinValue.AbsDiff(i64.MaxValue), u64.MaxValue);
            AreEqual(u08_100.AbsDiff(u08_1), 99);
            AreEqual(u16_100.AbsDiff(u16_1), 99);
            AreEqual(u32_100.AbsDiff(u32_1), 99);
            AreEqual(u64_100.AbsDiff(u64_1), 99);
            AreEqual(u08_1.AbsDiff(u08_100), 99);
            AreEqual(u16_1.AbsDiff(u16_100), 99);
            AreEqual(u32_1.AbsDiff(u32_100), 99);
            AreEqual(u64_1.AbsDiff(u64_100), 99);
        }
    }
}
