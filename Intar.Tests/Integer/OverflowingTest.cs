using NUnit.Framework;
using static NUnit.Framework.Assert;
using i32 = System.Int32;
using i64 = System.Int64;
using u32 = System.UInt32;
using u64 = System.UInt64;

namespace AgatePris.Intar.Tests.Integer {
    public class OverflowingTest {
        [Test]
        public void Test() {
            const i32 i32_0 = 0;
            const i64 i64_0 = 0;
            const u32 u32_0 = 0;
            const u64 u64_0 = 0;
            const i32 i32_2 = 2;
            const i64 i64_2 = 2;
            const u32 u32_2 = 2;
            const u64 u64_2 = 2;
            const i32 i32_10 = 10;
            const i64 i64_10 = 10;
            const i32 i32Neg2 = -2;
            const i64 i64Neg2 = -2;
            const i32 i32Neg100 = -100;
            const i64 i64Neg100 = -100;
            const i32 i32_100 = 100;
            const i64 i64_100 = 100;
            const u32 u32_1 = 1;
            const u64 u64_1 = 1;
            const u32 u32_100 = 100;
            const u64 u64_100 = 100;
            const u32 u32_200 = 200;
            const u64 u64_200 = 200;
            AreEqual(i32_100.WrappingAdd(27), 127);
            AreEqual(i64_100.WrappingAdd(27), 127);
            AreEqual(u32_200.WrappingAdd(55), 255);
            AreEqual(u64_200.WrappingAdd(55), 255);
            AreEqual(i32.MaxValue.WrappingAdd(2), i32.MinValue + 1);
            AreEqual(i64.MaxValue.WrappingAdd(2), i64.MinValue + 1);
            AreEqual(u32_200.WrappingAdd(u32.MaxValue), 199);
            AreEqual(u64_200.WrappingAdd(u64.MaxValue), 199);
            AreEqual(i32_0.WrappingSub(127), -127);
            AreEqual(i64_0.WrappingSub(127), -127);
            AreEqual(u32_100.WrappingSub(100), 0);
            AreEqual(u64_100.WrappingSub(100), 0);
            AreEqual(i32Neg2.WrappingSub(i32.MaxValue), i32.MaxValue);
            AreEqual(i64Neg2.WrappingSub(i64.MaxValue), i64.MaxValue);
            AreEqual(u32_100.WrappingSub(u32.MaxValue), 101);
            AreEqual(u64_100.WrappingSub(u64.MaxValue), 101);
            AreEqual(i32_10.WrappingMul(12), 120);
            AreEqual(i64_10.WrappingMul(12), 120);
            AreEqual(i32_100.WrappingAddUnsigned(27), 127);
            AreEqual(i64_100.WrappingAddUnsigned(27), 127);
            AreEqual(i32_2.WrappingAddUnsigned(u32.MaxValue), 1);
            AreEqual(i64_2.WrappingAddUnsigned(u64.MaxValue), 1);
            AreEqual(i32_0.WrappingSubUnsigned(127), -127);
            AreEqual(i64_0.WrappingSubUnsigned(127), -127);
            AreEqual(i32Neg2.WrappingSubUnsigned(u32.MaxValue), -1);
            AreEqual(i64Neg2.WrappingSubUnsigned(u64.MaxValue), -1);
            AreEqual(u32_1.WrappingAddSigned(2), 3);
            AreEqual(u64_1.WrappingAddSigned(2), 3);
            AreEqual(u32_1.WrappingAddSigned(-2), u32.MaxValue);
            AreEqual(u64_1.WrappingAddSigned(-2), u64.MaxValue);
            AreEqual(u32.MaxValue.WrappingAddSigned(2), 1);
            AreEqual(u64.MaxValue.WrappingAddSigned(2), 1);
            AreEqual(i32_100.WrappingNeg(), -100);
            AreEqual(i64_100.WrappingNeg(), -100);
            AreEqual(i32.MinValue.WrappingNeg(), i32.MinValue);
            AreEqual(i64.MinValue.WrappingNeg(), i64.MinValue);
            AreEqual(u32_0.WrappingNeg(), 0);
            AreEqual(u64_0.WrappingNeg(), 0);
            AreEqual(u32.MaxValue.WrappingNeg(), 1);
            AreEqual(u64.MaxValue.WrappingNeg(), 1);
            AreEqual(u32_2.WrappingNeg(), unchecked((u32)((~2) + 1)));
            AreEqual(u64_2.WrappingNeg(), unchecked((u64)((~2) + 1)));
            AreEqual(u32_2.WrappingNeg(), unchecked((u32)~1));
            AreEqual(u64_2.WrappingNeg(), unchecked((u64)~1));
            AreEqual(i32_100.WrappingAbs(), 100);
            AreEqual(i64_100.WrappingAbs(), 100);
            AreEqual(i32Neg2.WrappingAbs(), 2);
            AreEqual(i64Neg2.WrappingAbs(), 2);
            AreEqual(i32.MinValue.WrappingAbs(), i32.MinValue);
            AreEqual(i64.MinValue.WrappingAbs(), i64.MinValue);
            AreEqual(unchecked((u32)i32.MinValue.WrappingAbs()), (u32)i32.MaxValue + 1);
            AreEqual(unchecked((u64)i64.MinValue.WrappingAbs()), (u64)i64.MaxValue + 1);
            AreEqual(i32_100.UnsignedAbs(), 100);
            AreEqual(i64_100.UnsignedAbs(), 100);
            AreEqual(i32Neg2.UnsignedAbs(), 2);
            AreEqual(i64Neg2.UnsignedAbs(), 2);
            AreEqual(i32.MinValue.UnsignedAbs(), (u32)i32.MaxValue + 1);
            AreEqual(i64.MinValue.UnsignedAbs(), (u64)i64.MaxValue + 1);
            AreEqual(i32_100.AbsDiff(i32_2), 98);
            AreEqual(i64_100.AbsDiff(i64_2), 98);
            AreEqual(i32_2.AbsDiff(i32_100), 98);
            AreEqual(i64_2.AbsDiff(i64_100), 98);
            AreEqual(i32Neg2.AbsDiff(i32_100), 102);
            AreEqual(i64Neg2.AbsDiff(i64_100), 102);
            AreEqual(i32Neg2.AbsDiff(i32Neg100), 98);
            AreEqual(i64Neg2.AbsDiff(i64Neg100), 98);
            AreEqual(i32.MinValue.AbsDiff(i32.MaxValue), u32.MaxValue);
            AreEqual(i64.MinValue.AbsDiff(i64.MaxValue), u64.MaxValue);
            AreEqual(u32_100.AbsDiff(u32_1), 99);
            AreEqual(u64_100.AbsDiff(u64_1), 99);
            AreEqual(u32_1.AbsDiff(u32_100), 99);
            AreEqual(u64_1.AbsDiff(u64_100), 99);
        }
    }
}
